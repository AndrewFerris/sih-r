table_rp(data)
table <- table.frame(c("A", "B", "C", "A"),
c("D", "E", "F", "D"),
c("G", "H", "I", "H"),
c(10, 15, 20, 30),
stringsAsFactors = F)
row.names(table) <- c("Obs1", "Obs2", "Obs3", "Obs4")
colnames(table) <- c("W1", "W2", "W3", "Value")
table <- as.matrix(table)
table_rp <- function(table = table){
#load the required packages
library(gtable, quietly = TRUE)
library(riverplot, quietly = TRUE)
library(dplyr, quietly = TRUE)
#create the edges object
obj <- unique(t(apply(table[,1:ncol(table) - 1], 1, sort)))
N1 <- unmatrix(obj[,c(1:ncol(obj) - 1)])
N2 <- unmatrix(obj[,c(2:ncol(obj))])
Value <- rep(table[,c(ncol(table))], ncol(obj) - 1)
edges <- data.frame(N1, N2, Value, stringsAsFactors = F)
row.names(edges) <- NULL
edges <- as.data.frame(edges %>%
group_by(N1, N2) %>%
summarise(Value = sum(as.integer(Value))))
#create the nodes objects
ID = unique(c(obj))
x <- NULL
for(i in 1:ncol(table) - 1){
x <- c(x,rep(i, length(unique(table[,c(i)]))))
}
x <- as.integer(x)
y <- NULL
for(i in 1:ncol(table) - 1){
y <- c(y, seq(length(unique(table[,i]))))
}
y <- as.integer(y[3:length(y)])
nodes <- data.frame(ID, x, y, stringsAsFactors = F)
rownames(nodes) = nodes$ID
nodes
#create the riverplot objects
rp <- list(nodes = nodes, edges = edges)
class(rp) <- c(class(rp), "riverplot")
#plot object
plot(rp)
}
data <- data.frame(c("A1", "A1", "A1", "B1", "C1"),
c("A2", "C2", "C2", "A2", "B2"),
c("C3", "B3", "A3", "A3", "A3"),
c("C4", "C4", "A4", "B4", "C4"),
c(1,2,3,4,5),
stringsAsFactors = F)
row.names(data) <- c("R1", "R2", "R3", "R4", "R5")
colnames(data) <- c("Col1", "Col2", "Col3", "Col4", "Col5")
data <- as.matrix(data)
table_rp(data)
library(gtable, quietly = TRUE)
library(riverplot, quietly = TRUE)
library(dplyr, quietly = TRUE)
table_rp <- function(table = table){
#load the required packages
library(gtable, quietly = TRUE)
library(riverplot, quietly = TRUE)
library(dplyr, quietly = TRUE)
#create the edges object
obj <- unique(t(apply(table[,1:ncol(table) - 1], 1, sort)))
N1 <- unmatrix(obj[,c(1:ncol(obj) - 1)])
N2 <- unmatrix(obj[,c(2:ncol(obj))])
Value <- rep(table[,c(ncol(table))], ncol(obj) - 1)
edges <- data.frame(N1, N2, Value, stringsAsFactors = F)
row.names(edges) <- NULL
edges <- as.data.frame(edges %>%
group_by(N1, N2) %>%
summarise(Value = sum(as.integer(Value))))
#create the nodes objects
ID = unique(c(obj))
x <- NULL
for(i in 1:ncol(table) - 1){
x <- c(x,rep(i, length(unique(table[,c(i)]))))
}
x <- as.integer(x)
y <- NULL
for(i in 1:ncol(table) - 1){
y <- c(y, seq(length(unique(table[,i]))))
}
y <- as.integer(y[3:length(y)])
nodes <- data.frame(ID, x, y, stringsAsFactors = F)
rownames(nodes) = nodes$ID
nodes
#create the riverplot objects
rp <- list(nodes = nodes, edges = edges)
class(rp) <- c(class(rp), "riverplot")
#plot object
plot(rp)
}
data <- data.frame(c("A1", "A1", "A1", "B1", "C1"),
c("A2", "C2", "C2", "A2", "B2"),
c("C3", "B3", "A3", "A3", "A3"),
c("C4", "C4", "A4", "B4", "C4"),
c(1,2,3,4,5),
stringsAsFactors = F)
row.names(data) <- c("R1", "R2", "R3", "R4", "R5")
colnames(data) <- c("Col1", "Col2", "Col3", "Col4", "Col5")
data <- as.matrix(data)
table_rp(data)
#t_mat_rp
#allows the importation of transition matrices into the sankey plots via the riverplot package
#create a test data frame
transition_matrix <- matrix(c(1,2,3,4,5,6,7,8,9),nrow = 3, ncol = 3)
row.names(transition_matrix) <- c("A", "B", "C")
colnames(transition_matrix) <- c("D", "E", "F")
t_mat_rp <- function(transition_matrix){
#load the required packages
library(gdata, quietly = TRUE)
library(riverplot, quietly = TRUE)
#create the edges object
N1 <- gsub( "*:.", "", names(unmatrix(transition_matrix)))
N2 <- gsub( ".*:", "", names(unmatrix(transition_matrix)))
Value <- c(transition_matrix)
edges <- data.frame(N1, N2, Value, stringsAsFactors = F)
edges
#create the nodes objects
ID = unique(c(edges$N1, edges$N2))
x <- as.integer(c(rep(1, length(row.names(transition_matrix))), rep(2, length(colnames(transition_matrix)))))
y <- as.integer(c(seq(length(row.names(transition_matrix))), seq(length(colnames(transition_matrix)))))
nodes <- data.frame(ID, x, y, stringsAsFactors = F)
rownames(nodes) = nodes$ID
nodes
#create the riverplot objects
rp <- list(nodes = nodes, edges = edges)
class(rp) <- c(class(rp), "riverplot")
#plot object
plot(rp)
}
t_mat_rp(df)
table_rp <- function(table = table){
#load the required packages
library(gtable, quietly = TRUE)
library(riverplot, quietly = TRUE)
library(dplyr, quietly = TRUE)
#create the edges object
obj <- unique(t(apply(table[,1:ncol(table) - 1], 1, sort)))
N1 <- unmatrix(obj[,c(1:ncol(obj) - 1)])
N2 <- unmatrix(obj[,c(2:ncol(obj))])
Value <- rep(table[,c(ncol(table))], ncol(obj) - 1)
edges <- data.frame(N1, N2, Value, stringsAsFactors = F)
row.names(edges) <- NULL
edges <- as.data.frame(edges %>%
group_by(N1, N2) %>%
summarise(Value = sum(as.integer(Value))))
#create the nodes objects
ID = unique(c(obj))
x <- NULL
for(i in 1:ncol(table) - 1){
x <- c(x,rep(i, length(unique(table[,c(i)]))))
}
x <- as.integer(x)
y <- NULL
for(i in 1:ncol(table) - 1){
y <- c(y, seq(length(unique(table[,i]))))
}
y <- as.integer(y[3:length(y)])
nodes <- data.frame(ID, x, y, stringsAsFactors = F)
rownames(nodes) = nodes$ID
nodes
#create the riverplot objects
rp <- list(nodes = nodes, edges = edges)
class(rp) <- c(class(rp), "riverplot")
#plot object
plot(rp)
}
data <- data.frame(c("A1", "A1", "A1", "B1", "C1"),
c("A2", "C2", "C2", "A2", "B2"),
c("C3", "B3", "A3", "A3", "A3"),
c("C4", "C4", "A4", "B4", "C4"),
c(1,2,3,4,5),
stringsAsFactors = F)
row.names(data) <- c("R1", "R2", "R3", "R4", "R5")
colnames(data) <- c("Col1", "Col2", "Col3", "Col4", "Col5")
data <- as.matrix(data)
table_rp(data)
table_rp <- function(table = table){
#load the required packages
library(gtable, quietly = TRUE)
library(riverplot, quietly = TRUE)
library(dplyr, quietly = TRUE)
#create the edges object
obj <- unique(t(apply(table[,1:ncol(table) - 1], 1, sort)))
N1 <- unmatrix(obj[,c(1:ncol(obj) - 1)])
N2 <- unmatrix(obj[,c(2:ncol(obj))])
Value <- rep(table[,c(ncol(table))], ncol(obj) - 1)
edges <- data.frame(N1, N2, Value, stringsAsFactors = F)
row.names(edges) <- NULL
edges <- as.data.frame(edges %>%
group_by(N1, N2) %>%
summarise(Value = sum(as.integer(Value))))
#create the nodes objects
ID = unique(c(obj))
x <- NULL
for(i in 1:ncol(table) - 1){
x <- c(x,rep(i, length(unique(table[,c(i)]))))
}
x <- as.integer(x)
y <- NULL
for(i in 1:ncol(table) - 1){
y <- c(y, seq(length(unique(table[,i]))))
}
y <- as.integer(y[3:length(y)])
nodes <- data.frame(ID, x, y, stringsAsFactors = F)
rownames(nodes) = nodes$ID
nodes
#create the riverplot objects
rp <- list(nodes = nodes, edges = edges)
class(rp) <- c(class(rp), "riverplot")
rp
#plot object
plot(rp)
}
data <- data.frame(c("A1", "A1", "A1", "B1", "C1"),
c("A2", "C2", "C2", "A2", "B2"),
c("C3", "B3", "A3", "A3", "A3"),
c("C4", "C4", "A4", "B4", "C4"),
c(1,2,3,4,5),
stringsAsFactors = F)
row.names(data) <- c("R1", "R2", "R3", "R4", "R5")
colnames(data) <- c("Col1", "Col2", "Col3", "Col4", "Col5")
data <- as.matrix(data)
table_rp(data)
str(rp)
temp <- table_rp(data)
str(temp)
temp <- table_rp(data)
str(temp)
names(temp)
temp
table_rp <- function(table = table){
#load the required packages
library(gtable, quietly = TRUE)
library(riverplot, quietly = TRUE)
library(dplyr, quietly = TRUE)
#create the edges object
obj <- unique(t(apply(table[,1:ncol(table) - 1], 1, sort)))
N1 <- unmatrix(obj[,c(1:ncol(obj) - 1)])
N2 <- unmatrix(obj[,c(2:ncol(obj))])
Value <- rep(table[,c(ncol(table))], ncol(obj) - 1)
edges <- data.frame(N1, N2, Value, stringsAsFactors = F)
row.names(edges) <- NULL
edges <- as.data.frame(edges %>%
group_by(N1, N2) %>%
summarise(Value = sum(as.integer(Value))))
#create the nodes objects
ID = unique(c(obj))
x <- NULL
for(i in 1:ncol(table) - 1){
x <- c(x,rep(i, length(unique(table[,c(i)]))))
}
x <- as.integer(x)
y <- NULL
for(i in 1:ncol(table) - 1){
y <- c(y, seq(length(unique(table[,i]))))
}
y <- as.integer(y[3:length(y)])
nodes <- data.frame(ID, x, y, stringsAsFactors = F)
rownames(nodes) = nodes$ID
nodes
#create the riverplot objects
rp <- list(nodes = nodes, edges = edges)
class(rp) <- c(class(rp), "riverplot")
z <- list(nodes = nodes,
edges = edges)
#plot object
plot(rp)
}
table_rp <- function(table = table){
#load the required packages
library(gtable, quietly = TRUE)
library(riverplot, quietly = TRUE)
library(dplyr, quietly = TRUE)
#create the edges object
obj <- unique(t(apply(table[,1:ncol(table) - 1], 1, sort)))
N1 <- unmatrix(obj[,c(1:ncol(obj) - 1)])
N2 <- unmatrix(obj[,c(2:ncol(obj))])
Value <- rep(table[,c(ncol(table))], ncol(obj) - 1)
edges <- data.frame(N1, N2, Value, stringsAsFactors = F)
row.names(edges) <- NULL
edges <- as.data.frame(edges %>%
group_by(N1, N2) %>%
summarise(Value = sum(as.integer(Value))))
#create the nodes objects
ID = unique(c(obj))
x <- NULL
for(i in 1:ncol(table) - 1){
x <- c(x,rep(i, length(unique(table[,c(i)]))))
}
x <- as.integer(x)
y <- NULL
for(i in 1:ncol(table) - 1){
y <- c(y, seq(length(unique(table[,i]))))
}
y <- as.integer(y[3:length(y)])
nodes <- data.frame(ID, x, y, stringsAsFactors = F)
rownames(nodes) = nodes$ID
nodes
#create the riverplot objects
rp <- list(nodes = nodes, edges = edges)
class(rp) <- c(class(rp), "riverplot")
z <- list(nodes = nodes,
edges = edges)
z
#plot object
plot(rp)
}
data <- data.frame(c("A1", "A1", "A1", "B1", "C1"),
c("A2", "C2", "C2", "A2", "B2"),
c("C3", "B3", "A3", "A3", "A3"),
c("C4", "C4", "A4", "B4", "C4"),
c(1,2,3,4,5),
stringsAsFactors = F)
row.names(data) <- c("R1", "R2", "R3", "R4", "R5")
colnames(data) <- c("Col1", "Col2", "Col3", "Col4", "Col5")
data <- as.matrix(data)
temp <- table_rp(data)
str(z)
str(temp)
