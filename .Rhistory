grad <- NULL
col  <- getattr(x$styles, id, "col")
}
#print(grad)
curveseg(pos.m[ "x", n1 ] + dx1, pos.m[ "x", n2 ] - dx2,
pos.m[ "rpos", n1 ],    pos.m[ "lpos", n2 ],
width=ss, grad=grad, col=col,
lty=lty, nsteps=nsteps, form=form, fix.pdf=fix.pdf)
pos.m[ "rpos", n1 ] <- pos.m[ "rpos", n1 ] + ss
pos.m[ "lpos", n2 ] <- pos.m[ "lpos", n2 ] + ss
}
}
draw.nodes <- function(x, pos.m, width=0.2,
lty=1, col=NULL, srt=NULL, textcol=NULL, textpos=NULL, boxw=0.2) {
w <- boxw / 2
for(n in names(x)) {
if(getattr(x$styles, n, "nodestyle") =="invisible") next ;
# if specific values are provided, they override the styles
if(is.null(.lty <- lty)) .lty <- getattr(x$styles, n, "lty")
if(is.null(.col <- col)) .col <- getattr(x$styles, n, "col")
if(is.null(.srt <- srt)) .srt <- getattr(x$styles, n, "srt")
if(is.null(.textpos <- textpos)) .textpos <- getattr(x$styles, n, "textpos")
if(is.null(.textcol <- textcol)) .textcol <- getattr(x$styles, n, "textcol")
.textcex <- getattr(x$styles, n, "textcex")
if(is.null(x$nodes$labels) || is.na(x$nodes[n,]$labels)) lab <- n
else                                              lab <- x$nodes[n,]$labels
if(getattr(x$styles, n, "nodestyle") =="point") {
points(pos.m[ "x", n ], pos.m[ "center", n ], pch=19, col=col)
} else {
rect(
pos.m[ "x", n ] - w, pos.m[ "bottom", n ],
pos.m[ "x", n ] + w, pos.m[ "top", n ],
lty=.lty, col=.col)
}
text(pos.m[ "x", n ], pos.m[ "center", n ], lab, col=.textcol, srt=.srt, pos=.textpos, cex=.textcex)
}
}
autoscale <- function(x) {
if(! ypos_present(x)) return(1)
yrange <- range(x$nodes$y)
yrange <- yrange[2] - yrange[1]
ns <- max(x$edges$Value)
if(ns ==0) return(1) # not our problem
yscale <- 0.15 * yrange / ns
return(yscale)
}
riverplot <- function(x, direction="lr", lty=0,
default_style=NULL, gravity="top",
node_margin=0.1,
nodewidth=1.5,
plot_area=0.5,
nsteps=50,
add_mid_points=NULL,
xscale=1,
yscale="auto",
mar=c(0,0,0,0),
add=FALSE,
usr=NULL,
fix.pdf=FALSE,
...
) {
ds <- list(...)
default_style <- getstyle(ds, defaults=default_style)
direction <- match.arg(direction, c("lr", "rl"))
if(!add) plot.new()
dmsgc("--------------\nDefault style:\n-----------\n")
dmsg(default_style)
dmsgc("--------------\n")
x2 <- x
x2$nodes$ID <- as.character(x2$nodes$ID)
# check sanity of the edge information
dmsg("checking edges")
x2$edges <- checkedges(x2$edges, names(x2))
# N1 must be the node on the left, N2 on the right
x2 <- orderConnections(x2)
# add mid points automatically depending whether y-positions of nodes are specified
if(is.null(add_mid_points) && !ypos_present(x2)) {
dmsg("adding mid points")
x2 <- add_mid_points(x2)
}
# update styles for all nodes
for(n in c(x2$nodes$ID, x2$edges$ID)) {
x2$styles[[ n ]] <- getstyle(x2$styles[[ n ]], default_style, update.missing=FALSE)
}
dmsgc("Updated styles:\n")
dmsg(x2$styles)
dmsgc("--------------\n")
#for(n in names(x2$nodes)) { x2$styles[[ n ]] <- getstyle(x2$styles[[ n ]], default.style) }
if(yscale =="auto") yscale <- autoscale(x2)
if(yscale !=1) x2$edges$Value <- x2$edges$Value * yscale
dmsg("calculating sizes")
sizes <- calcsizes2(x2)
dmsg(sizes)
dmsg("calculating positions")
positions <- calcpos(x2, sizes, gravity=gravity, node_margin=node_margin)
dmsg("done")
xrange <- range(x2$nodes$x)
xlim <- xrange + (xrange[2]-xrange[1]) * c(-0.1, 0.1)
ylim <- range(positions[ c("bottom", "top"), ])
b <- (ylim[2] - ylim[1]) * (1-plot_area)/plot_area / 2
ylim <- ylim + c(-b, b)
if(!is.null(mar))
oldmar <- par(mar=mar)
l <- names(x2$nodes)[ order(x2$nodes) ]
dev.hold()
on.exit({
dev.flush()
par(oldmar)
})
w <- strwidth("hjKg") * nodewidth / 2
# rescale the coordinates to on screen coordinates
if(is.null(usr)) usr <- par("usr")
xscale <- xscale * (usr[2] - usr[1]) / (xlim[2] - xlim[1])
yscale <- (usr[4] - usr[3])/(ylim[2] - ylim[1])
positions[1,]   <- (positions[1,]   - xlim[1]) * xscale + usr[1]
if(direction == "rl") {
positions[1,] <- usr[2] - positions[1,]
}
positions[2:6,] <- (positions[2:6,] - ylim[1]) * yscale + usr[3]
dmsg("drawing edges")
fix.pdf <- as.numeric(fix.pdf)
draw.edges(x2, positions, lty=lty, nsteps=nsteps, boxw=w, yscale=yscale, fix.pdf=fix.pdf)
dmsg("drawing nodes")
draw.nodes(x2, positions, boxw=w, lty=lty)
return(invisible(positions))
}
test <- load("/Users/andrewferris/Documents/sihr/data/data_rp_table.rda")
load("/Users/andrewferris/Documents/sihr/data/data_rp_table.rda")
rm(test)
rm(data_rp_table)
load("/Users/andrewferris/Documents/sihr/data/data_rp_table.rda")
rownames(data_rp_table)
colnames(data_rp_table)
test_list <- NULL
test_list <- list()
for(i in 1:length(row.names(data_rp_table))){
test_list[i] <- row.names(data_rp_table)
}
for(i in 1:length(row.names(data_rp_table))){
test_list[i] <- row.names(data_rp_table)[i]
}
test_list
styles= list(
R1 = list(
col = "#00990099",
lty = 0,
textcol = "white"
),
R2 = list(
col = "#FF000099",
lty = 0,
textcol = "white"
),
R3 = list(
col= "#00006699",
lty = 0,
textcol= "white"
),
R4 = list(
col= "yellow",
lty = 0,
textcol = "white"
),
R5 = list(
col= "#00FF0099",
lty = 0,
textcol = "white"
)
)
styles
test_styles = list(
row.names(data_rp_table)
)
test_styles
test_styles[1]
test_styles[[1]]
test_styles = list(
test_styles$row.names(data_rp_table)
)
styles = list(
R1 = list(
col = "#00990099",
lty = 0,
textcol = "white"
),
R2 = list(
col = "#FF000099",
lty = 0,
textcol = "white"
),
R3 = list(
col= "#00006699",
lty = 0,
textcol= "white"
),
R4 = list(
col= "#00FF0011",
lty = 0,
textcol = "white"
),
R5 = list(
col= "#00FF0099",
lty = 0,
textcol = "white"
)
)
styles
View(data_rp_table)
c(data_rp_table)
c(data_rp_table[,1:4])
elements <- c(data_rp_table[,1:4])
library(RColorBrewer)
col <-
?brewer.pal
?brewer.pal
if(length(elements) > 9){
col <- brewer.pal(length(elements), "YlGnBu")
} else {
col <- brewer.pal(length(elements), "Spectral")
}
col <- brewer.pal(length(elements), "YlGnBu")
col <- brewer.pal(20, "YlGnBu")
col <- brewer.pal(20)
col <- brewer.pal(20, "PuBuGn")
col <- brewer.pal(20, "GnBu")
col <- brewer.pal(20, "Blues")
test_styles = list(
elements
)
install.packages("colorspace")
library(colorspace)
col <- rainbow(length(elements))
palette(col)
palette(col)
pal(col)
plot(col)
col
col <- rainbow(100)
col
col <- rainbow(1000)
col
specplot(col)
for(i in 1:length(elements)){
test_styles[i] <- list(
col = "red",
lty = "0",
textcol = "black"
)
}
warnings
warnings()
test_styles
test_styles = list(
elements
)
test_styles
for(i in 1:length(elements)){
test_styles[[1]][i] <- list(
col = "red",
lty = "0",
textcol = "black"
)
}
test_styles
test_styles = list(
paste0(elements)
)
test_styles
styles[1]
styles = list(
row.names(data_rp_table)[1] = list(
col = "#00990099",
lty = 0,
textcol = "white"
),
R2 = list(
col = "#FF000099",
lty = 0,
textcol = "white"
),
R3 = list(
col= "#00006699",
lty = 0,
textcol= "white"
),
R4 = list(
col= "#00FF0011",
lty = 0,
textcol = "white"
),
R5 = list(
col= "#00FF0099",
lty = 0,
textcol = "white"
)
)
styles = list(
row.names(data_rp_table)[1] = list(
col = "#00990099",
lty = 0,
textcol = "white"
),
R2 = list(
col = "#FF000099",
lty = 0,
textcol = "white"
),
R3 = list(
col= "#00006699",
lty = 0,
textcol= "white"
),
R4 = list(
col= "#00FF0011",
lty = 0,
textcol = "white"
),
R5 = list(
col= "#00FF0099",
lty = 0,
textcol = "white"
)
)
styles = list(
rownames(data_rp_table)[1] = list(
col = "#00990099",
lty = 0,
textcol = "white"
),
R2 = list(
col = "#FF000099",
lty = 0,
textcol = "white"
),
R3 = list(
col= "#00006699",
lty = 0,
textcol= "white"
),
R4 = list(
col= "#00FF0011",
lty = 0,
textcol = "white"
),
R5 = list(
col= "#00FF0099",
lty = 0,
textcol = "white"
)
)
rownames(data_rp_table)[[1]]
styles = list(
rownames(data_rp_table)[[1]] = list(
col = "#00990099",
lty = 0,
textcol = "white"
),
R2 = list(
col = "#FF000099",
lty = 0,
textcol = "white"
),
R3 = list(
col= "#00006699",
lty = 0,
textcol= "white"
),
R4 = list(
col= "#00FF0011",
lty = 0,
textcol = "white"
),
R5 = list(
col= "#00FF0099",
lty = 0,
textcol = "white"
)
)
styles = list(
rownames(data_rp_table)[[1]] = list(
col = "#00990099",
lty = 0,
textcol = "white"
),
R2 = list(
col = "#FF000099",
lty = 0,
textcol = "white"
),
R3 = list(
col= "#00006699",
lty = 0,
textcol= "white"
),
R4 = list(
col= "#00FF0011",
lty = 0,
textcol = "white"
),
R5 = list(
col= "#00FF0099",
lty = 0,
textcol = "white"
)
)
styles = list(
print(rownames(data_rp_table)[[1]]) = list(
col = "#00990099",
lty = 0,
textcol = "white"
),
R2 = list(
col = "#FF000099",
lty = 0,
textcol = "white"
),
R3 = list(
col= "#00006699",
lty = 0,
textcol= "white"
),
R4 = list(
col= "#00FF0011",
lty = 0,
textcol = "white"
),
R5 = list(
col= "#00FF0099",
lty = 0,
textcol = "white"
)
)
rownames(data_rp_table)[[1]]
styles = list(
print(rownames(data_rp_table)[[1]]) = list(
col = "#00990099",
lty = 0,
textcol = "white"
),
R2 = list(
col = "#FF000099",
lty = 0,
textcol = "white"
),
R3 = list(
col= "#00006699",
lty = 0,
textcol= "white"
),
R4 = list(
col= "#00FF0011",
lty = 0,
textcol = "white"
),
R5 = list(
col= "#00FF0099",
lty = 0,
textcol = "white"
)
)
styles = list(
R1 = list(
col = "#00990099",
lty = 0,
textcol = "white"
),
R2 = list(
col = "#FF000099",
lty = 0,
textcol = "white"
),
R3 = list(
col= "#00006699",
lty = 0,
textcol= "white"
),
R4 = list(
col= "#00FF0011",
lty = 0,
textcol = "white"
),
R5 = list(
col= "#00FF0099",
lty = 0,
textcol = "white"
)
)
styles
styles
styles_2 <- list(R1, R2, R3, R4, R5)
styles_2 <- list(R1 = list(), R2 = list(), R3 = list(), R4 = list(), R5 = list())
row.names(data_rp_table)
test <- list(row.names(data_rp_table))
test
View(data_rp_table)
View(data_rp_table)
R1 <- list()
row.names(data_rp_table)[1] <- list()
?parse
?eval
eval(parse(row.names(data_rp_table)[1])) <- list()
parse(row.names(data_rp_table)[1]) <- list()
eval(parse(text = row.names(data_rp_table)[1]))
eval(parse(text = row.names(data_rp_table)[1]) <- list())
paste0(row.names(data_rp_table)[1]," <- list()")
eval(parse(text = paste0(row.names(data_rp_table)[1]," <- list()")))
rm(R1)
eval(parse(text = paste0(row.names(data_rp_table)[1]," <- list()")))
?bequote
?bquote
?libraryfortunes
??libraryfortunes
